diff --git a/node_modules/mdast-util-gfm-task-list-item/lib/index.js b/node_modules/mdast-util-gfm-task-list-item/lib/index.js
index 80a713c..fbc303c 100644
--- a/node_modules/mdast-util-gfm-task-list-item/lib/index.js
+++ b/node_modules/mdast-util-gfm-task-list-item/lib/index.js
@@ -8,8 +8,8 @@
  * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle
  */
 
-import {ok as assert} from 'devlop'
-import {defaultHandlers} from 'mdast-util-to-markdown'
+import { ok as assert } from "assert";
+import { defaultHandlers } from "mdast-util-to-markdown";
 
 /**
  * Create an extension for `mdast-util-from-markdown` to enable GFM task
@@ -25,7 +25,7 @@ export function gfmTaskListItemFromMarkdown() {
       taskListCheckValueUnchecked: exitCheck,
       paragraph: exitParagraphWithTaskListItem
     }
-  }
+  };
 }
 
 /**
@@ -37,9 +37,9 @@ export function gfmTaskListItemFromMarkdown() {
  */
 export function gfmTaskListItemToMarkdown() {
   return {
-    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],
-    handlers: {listItem: listItemWithTaskListItem}
-  }
+    unsafe: [{ atBreak: true, character: '-', after: '[:|-]' }],
+    handlers: { listItem: listItemWithTaskListItem }
+  };
 }
 
 /**
@@ -48,9 +48,9 @@ export function gfmTaskListItemToMarkdown() {
  */
 function exitCheck(token) {
   // Weâ€™re always in a paragraph, in a list item.
-  const node = this.stack[this.stack.length - 2]
-  assert(node.type === 'listItem')
-  node.checked = token.type === 'taskListCheckValueChecked'
+  const node = this.stack[this.stack.length - 2];
+  assert(node.type === "listItem");
+  node.checked = token.type === "taskListCheckValueChecked";
 }
 
 /**
@@ -58,51 +58,51 @@ function exitCheck(token) {
  * @type {FromMarkdownHandle}
  */
 function exitParagraphWithTaskListItem(token) {
-  const parent = this.stack[this.stack.length - 2]
+  const parent = this.stack[this.stack.length - 2];
 
   if (
     parent &&
-    parent.type === 'listItem' &&
-    typeof parent.checked === 'boolean'
+    parent.type === "listItem" &&
+    typeof parent.checked === "boolean"
   ) {
-    const node = this.stack[this.stack.length - 1]
-    assert(node.type === 'paragraph')
-    const head = node.children[0]
+    const node = this.stack[this.stack.length - 1];
+    assert(node.type === "paragraph");
+    const head = node.children[0];
 
-    if (head && head.type === 'text') {
-      const siblings = parent.children
-      let index = -1
+    if (head && head.type === "text") {
+      const siblings = parent.children;
+      let index = -1;
       /** @type {Paragraph | undefined} */
-      let firstParaghraph
+      let firstParagraph;
 
       while (++index < siblings.length) {
-        const sibling = siblings[index]
-        if (sibling.type === 'paragraph') {
-          firstParaghraph = sibling
-          break
+        const sibling = siblings[index];
+        if (sibling.type === "paragraph") {
+          firstParagraph = sibling;
+          break;
         }
       }
 
-      if (firstParaghraph === node) {
+      if (firstParagraph === node) {
         // Must start with a space or a tab.
-        head.value = head.value.slice(1)
+        head.value = head.value.slice(1);
 
         if (head.value.length === 0) {
-          node.children.shift()
+          node.children.shift();
         } else if (
           node.position &&
           head.position &&
-          typeof head.position.start.offset === 'number'
+          typeof head.position.start.offset === "number"
         ) {
-          head.position.start.column++
-          head.position.start.offset++
-          node.position.start = Object.assign({}, head.position.start)
+          head.position.start.column++;
+          head.position.start.offset++;
+          node.position.start = Object.assign({}, head.position.start);
         }
       }
     }
   }
 
-  this.exit(token)
+  this.exit(token);
 }
 
 /**
@@ -110,32 +110,32 @@ function exitParagraphWithTaskListItem(token) {
  * @param {ListItem} node
  */
 function listItemWithTaskListItem(node, parent, state, info) {
-  const head = node.children[0]
+  const head = node.children[0];
   const checkable =
-    typeof node.checked === 'boolean' && head && head.type === 'paragraph'
-  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '
-  const tracker = state.createTracker(info)
+    typeof node.checked === "boolean" && head && head.type === "paragraph";
+  const checkbox = "[" + (node.checked ? "x" : " ") + "] ";
+  const tracker = state.createTracker(info);
 
   if (checkable) {
-    tracker.move(checkbox)
+    tracker.move(checkbox);
   }
 
   let value = defaultHandlers.listItem(node, parent, state, {
     ...info,
     ...tracker.current()
-  })
+  });
 
   if (checkable) {
-    value = value.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/, check)
+    value = value.replace(/^(?:[*+-]|\d+\.)([\r\n]| {1,3})/, check);
   }
 
-  return value
+  return value;
 
   /**
    * @param {string} $0
    * @returns {string}
    */
   function check($0) {
-    return $0 + checkbox
+    return $0 + checkbox;
   }
 }
